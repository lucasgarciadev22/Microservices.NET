version: "3.4"

services:
  #nginx reverse proxy service
  # reverseproxy:
  #   container_name: nginxgateway
  #   restart: always
  #   depends_on:
  #     - identityserver
  #     - catalog.api
  #     - basket.api
  #     - discount.api
  #     - ordering.api
  #   ports:
  #     - "44344:433" #nginx map local port to https port

  #mongodb based database for catalog api
  catalogdb:
    container_name: catalogdb
    restart: always
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db

  #rediscache based 'database' for basket api
  basketdb:
    container_name: basketdb
    restart: always
    ports:
      - "6379:6379"

  #postgresql based database for discount api
  discountdb:
    container_name: discountdb
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=Password@1
      - POSTGRES_DB=DiscountDb
    restart: always
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin"]
      interval: 10s
      timeout: 5s
      retries: 5

  #sqlserver based database for ordering api
  orderingdb:
    container_name: orderingdb
    environment:
      SA_PASSWORD: "Lucas*12345"
      ACCEPT_EULA: "Y"
    restart: always
    ports:
      - "1434:1433"
    volumes:
      - orderingdb_data:/var/opt/mssql
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P 'Lucas*12345' -Q 'select 1'",
        ]
      interval: 10s
      timeout: 10s
      retries: 3

  #rabbit mq services tha will be communicating ordering api with basket api trough event bus messages project
  rabbitmq:
    container_name: rabbitmq
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672"

  #pgadmin for monitoring the postgresql databases
  pgadmin:
    container_name: pgadmin
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@eShopping.net
      - PGADMIN_DEFAULT_PASSWORD=Password@1
    restart: always
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/root/.pgadmin

  #portainer for monitoring running containers
  portainer:
    container_name: portainer
    restart: always
    ports:
      - "8080:8000"
      - "9090:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data

  #catalog api data context configs, providing appsettings.json values to container context
  catalog.api:
    container_name: catalog.api
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://0.0.0.0:80
      - "DatabaseSettings__ConnectionString=mongodb://catalogdb:27017"
      - "DatabaseSettings__DatabaseName=CatalogDb"
      - "DatabaseSettings__CollectionName=Products"
      - "DatabaseSettings__BrandsCollection=Brands"
      - "DatabaseSettings__TypesCollection=Types"
      - "ElasticConfiguration__Uri=http://elasticsearch:9200"
    depends_on:
      - catalogdb
    ports:
      - "9000:80"

  #basket api data context configs, providing appsettings.json values to container context including cache and grpc client settings
  basket.api:
    container_name: basket.api
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://0.0.0.0:80
      - "CacheSettings__ConnectionString=basketdb:6379"
      - "GrpcSettings__DiscountUrl=http://discount.api"
      - "EventBusSettings__HostAddress=amqp://guest:guest@rabbitmq:5672"
      - "ElasticConfiguration__Uri=http://elasticsearch:9200"
    depends_on:
      - basketdb
      - rabbitmq
    ports:
      - "9001:80"

  #discount api data context configs, providing appsettings.json values to container context including postgresql settings
  discount.api:
    container_name: discount.api
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://0.0.0.0:80
      - "DatabaseSettings__ConnectionString=Server=discountdb;Port=5432;Database=DiscountDb;User Id=admin;Password=Password@1;"
      - "ElasticConfiguration__Uri=http://elasticsearch:9200"
    depends_on:
      discountdb:
        condition: service_healthy
    ports:
      - "9002:80"

  #ordering api data context configs, providing appsettings.json values to container context including sqlserver settings
  ordering.api:
    container_name: ordering.api
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://0.0.0.0:80
      - "ConnectionStrings__OrderingConnectionString=Server=orderingdb;Database=OrderingDb;User Id=sa;Password=Lucas*12345;TrustServerCertificate=True"
      - "EventBusSettings__HostAddress=amqp://guest:guest@rabbitmq:5672"
      - "ElasticConfiguration__Uri=http://elasticsearch:9200"
    depends_on:
      - orderingdb
      - rabbitmq
    ports:
      - "9003:80"

  #elastic search configs, providing tools to search and manage log files from serilog
  elasticsearch:
    container_name: elasticsearch
    environment:
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - discovery.type=single-node
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data

  #kibana configs, providing a monitoring plataform for the whole project
  kibana:
    container_name: kibana
    environment:
      - ELASTICSEARCH_URL=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    ports:
      - "5601:5601"

  #ocelot api gateway for redirecting routes and managing
  ocelot.apigateway:
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
    depends_on:
      - catalog.api
      - basket.api
      - discount.api
      - ordering.api
    ports:
      - "8010:8080"
# #identity server auth controller for managing accesses
#   identityserver:
#       container_name: identityserver
#       environment:
#         - ASPNETCORE_ENVIRONMENT=Development
#         - ASPNETCORE_URLS=http://0.0.0.0:9011
#       ports:
#         - "9011:9011"
